{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","web/js/main.js","main.js","node_modules/deku/lib/application.js","node_modules/deku/lib/index.js","node_modules/deku/lib/render.js","node_modules/deku/lib/stringify.js","node_modules/deku/lib/svg.js","node_modules/deku/lib/utils.js","node_modules/deku/lib/virtual.js","node_modules/deku/node_modules/array-flatten/array-flatten.js","node_modules/deku/node_modules/component-emitter/index.js","node_modules/deku/node_modules/component-raf/index.js","node_modules/deku/node_modules/component-type/index.js","node_modules/deku/node_modules/dom-pool/Pool.js","node_modules/deku/node_modules/dom-walk/index.js","node_modules/deku/node_modules/fast.js/array/forEach.js","node_modules/deku/node_modules/fast.js/array/indexOf.js","node_modules/deku/node_modules/fast.js/array/reduce.js","node_modules/deku/node_modules/fast.js/forEach.js","node_modules/deku/node_modules/fast.js/function/bindInternal3.js","node_modules/deku/node_modules/fast.js/function/bindInternal4.js","node_modules/deku/node_modules/fast.js/object/assign.js","node_modules/deku/node_modules/fast.js/object/forEach.js","node_modules/deku/node_modules/fast.js/object/reduce.js","node_modules/deku/node_modules/fast.js/reduce.js","node_modules/deku/node_modules/get-uid/index.js","node_modules/deku/node_modules/is-dom/index.js","node_modules/deku/node_modules/is-promise/index.js","node_modules/deku/node_modules/object-path/index.js","node_modules/deku/node_modules/per-frame/index.js","node_modules/deku/node_modules/sliced/index.js","node_modules/deku/node_modules/sliced/lib/sliced.js","node_modules/vdom-benchmark-base/lib/benchmark.js","node_modules/vdom-benchmark-base/lib/executor.js","node_modules/vdom-benchmark-base/lib/index.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","renderTree","nodes","children","push","createElement","key","toString","BenchmarkImpl","container","b","this","tree","deku","benchmark","dom","NAME","VERSION","prototype","setUp","tearDown","render","renderer","mount","update","document","addEventListener","vdom-benchmark-base",2,"Application","element","options","sources","Emitter","use","plugin","option","name","val","set","data","emit","unmount","component-emitter",3,"scene","renderString","./application","./render","./stringify","./virtual",4,"app","opts","teardown","removeNativeEventListeners","removeNativeElement","off","onunmount","onmount","onupdate","invalidate","currentElement","connections","forEach","mountEntity","entity","register","setSources","id","entities","commit","trigger","context","virtualElement","renderEntity","nativeElement","toNative","mountQueue","unmountEntity","entityId","unmountChildren","removeAllEvents","componentEntities","components","component","result","setState","nextState","updateEntityStateAsync","batching","frameId","raf","isRendering","clearFrame","currentNativeElement","patch","rootId","updateChildren","console","info","body","warn","removeAllChildren","appendChild","flushMountQueue","pop","triggerUpdate","cancel","updateEntity","shouldUpdate","currentTree","nextProps","pendingProps","pendingState","previousState","state","previousProps","props","nextTree","childId","removeElement","path","vnode","type","toNativeText","toNativeElement","toNativeComponent","createTextNode","el","attributes","tagName","pooling","canPool","pool","getPool","cleanup","parentNode","removeChild","svg","isElement","createElementNS","namespace","value","setAttribute","__entity__","__path__","child","childEl","Entity","prev","next","diffNode","replaceElement","diffText","diffElement","diffComponent","previous","current","diffChildren","keyMapReducer","acc","hasKeys","positions","childNodes","Array","slice","apply","leftKeys","reduce","rightKeys","currentChildren","assign","leftNode","leftPath","index","rightNode","rightPath","childPath","maxLength","Math","max","newPosition","target","insertBefore","diffAttributes","nextAttrs","prevAttrs","events","removeAttribute","targetId","updateEntityProps","childrenByPath","entityHandlers","handlers","removals","isWithinPath","fn","handlerPath","removeEvent","walk","node","toLowerCase","parent","indexOf","newEl","updateNativeElement","ownerId","addEvent","isAttribute","setAttributeNS","pools","poolOpts","Pool","removeAllAttributes","firstChild","args","isPromise","then","newState","updateEntityState","dirty","validateProps","propTypes","bool","map","sourceToPropertyName","source","prop","changes","addNativeEventListeners","eventType","handleEvent","removeEventListener","event","keypath","get","delegateTarget","throttle","del","rules","optPrefix","prefix","propName","valueType","typeFormat","optional","TypeError","expects","inspect","isDom","defaults","on","remove","uid","defaultProps","initialState","displayName","avoidPooling","utils","onBlur","onChange","onClick","onContextMenu","onCopy","onCut","onDoubleClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onFocus","onInput","onKeyDown","onKeyUp","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onPaste","onScroll","onSubmit","onTouchCancel","onTouchEnd","onTouchMove","onTouchStart","./svg","./utils","component-raf","component-type","dom-pool","dom-walk","fast.js/forEach","fast.js/object/assign","fast.js/reduce","get-uid","is-dom","is-promise","object-path","per-frame",5,"attrs","str","attr","stringify","optProps","beforeMount","beforeRender","stringifyNode","innerHTML",6,"elements","fast.js/array/indexOf",7,"Object","keys",8,"virtual","arguments","isArray","flatten","normalize","String","ElementNode","ComponentNode","newNode","TextNode","parseAttributes","text","style","parseStyle","parseClass","filteredAttributes","styles","matched","join","array-flatten","sliced",9,"flattenDepth","array","depth","flattenForever",10,"obj","mixin","_callbacks","once","removeListener","removeAllListeners","callbacks","cb","splice","len","listeners","hasListeners",11,"fallback","curr","Date","getTime","ms","req","setTimeout","window","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","cancelAnimationFrame","webkitCancelAnimationFrame","mozCancelAnimationFrame","clearTimeout",12,"undefined","nodeType","valueOf",13,"params","storage","argument","create","allocate","size","difference","poolAllocIter",14,"iterativelyWalk","shift","ret","concat",15,"bindInternal3","subject","thisContext","iterator","../function/bindInternal3",16,"fromIndex",17,"bindInternal4","initialValue","../function/bindInternal4",18,"forEachArray","forEachObject","./array/forEach","./object/forEach",19,"func","c",20,"d",21,"totalKeys","j","totalArgs",22,23,24,"reduceArray","reduceObject","./array/reduce","./object/reduce",25,"counter","now","random",26,"Node","nodeName",27,28,"root","factory","define","amd","objectPath","isEmpty","_hasOwnProperty","toStr","isNumber","isString","isObject","isBoolean","getKey","intKey","parseInt","doNotReplace","split","currentPath","oldVal","hasOwnProperty","has","ensureExists","insert","at","arr","empty","coalesce","paths","defaultValue",29,"rtn","ignoring",30,"./lib/sliced",31,"sliceEnd","start",32,"Benchmark","running","impl","tests","reportCallback","_runButton","getElementById","_iterationsElement","_reportElement","self","preventDefault","iterations","run","ready","Executor","v","disabled","samples","textContent","JSON","./executor",33,"iterCb","_currentTest","_currentIter","_renderSamples","_updateSamples","_result","_tasksCount","_iter","iter","bind","finished","progress","iterataions","test","renderTime","updateTime","performance",34,"initFromScript","scriptUrl","src","onload","benchmarkTests","head","initFromParentWindow","version","postMessage","init","qs","p","decodeURIComponent","replace","location","search","substr","opener","log","testsUrl","nowOffset","timing","navigationStart","./benchmark"],"mappings":"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","file":"main.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n\nvar benchmark = require('vdom-benchmark-base');\nvar deku = require('deku');\nvar createElement = deku.dom;\n\nvar NAME = 'Deku';\nvar VERSION = '0.4.1';\n\nfunction renderTree(nodes) {\n  var children = [];\n  var i;\n  var e;\n  var n;\n\n  for (i = 0; i < nodes.length; i++) {\n    n = nodes[i];\n    if (n.children !== null) {\n      children.push(createElement('div', {key: n.key}, renderTree(n.children)));\n    } else {\n      children.push(createElement('span', {key: n.key}, n.key.toString()));\n    }\n  }\n\n  return children;\n}\n\nfunction BenchmarkImpl(container, a, b) {\n  this.tree = deku.tree();\n  this.container = container;\n  this.a = a;\n  this.b = b;\n}\n\nBenchmarkImpl.prototype.setUp = function() {\n};\n\nBenchmarkImpl.prototype.tearDown = function() {\n  // this.renderer.remove();\n};\n\nBenchmarkImpl.prototype.render = function() {\n  this.renderer = deku.render(this.tree, this.container);\n  this.tree.mount(createElement('div', null, renderTree(this.a)));\n};\n\nBenchmarkImpl.prototype.update = function() {\n  this.tree.mount(createElement('div', null, renderTree(this.b)), this.container);\n};\n\ndocument.addEventListener('DOMContentLoaded', function(e) {\n  benchmark(NAME, VERSION, BenchmarkImpl);\n}, false);\n",null,"/**\n * Module dependencies.\n */\n\nvar Emitter = require('component-emitter')\n\n/**\n * Expose `scene`.\n */\n\nmodule.exports = Application\n\n/**\n * Create a new `Application`.\n *\n * @param {Object} element Optional initial element\n */\n\nfunction Application (element) {\n  if (!(this instanceof Application)) return new Application(element)\n  this.options = {}\n  this.sources = {}\n  this.element = element\n}\n\n/**\n * Mixin `Emitter`.\n */\n\nEmitter(Application.prototype)\n\n/**\n * Add a plugin\n *\n * @param {Function} plugin\n */\n\nApplication.prototype.use = function (plugin) {\n  plugin(this)\n  return this\n}\n\n/**\n * Set an option\n *\n * @param {String} name\n */\n\nApplication.prototype.option = function (name, val) {\n  this.options[name] = val\n  return this\n}\n\n/**\n * Set value used somewhere in the IO network.\n */\n\nApplication.prototype.set = function (name, data) {\n  this.sources[name] = data\n  this.emit('source', name, data)\n  return this\n}\n\n/**\n * Mount a virtual element.\n *\n * @param {VirtualElement} element\n */\n\nApplication.prototype.mount = function (element) {\n  this.element = element\n  this.emit('mount', element)\n  return this\n}\n\n/**\n * Remove the world. Unmount everything.\n */\n\nApplication.prototype.unmount = function () {\n  if (!this.element) return\n  this.element = null\n  this.emit('unmount')\n  return this\n}\n","/**\n * Create the application.\n */\n\nexports.tree =\nexports.scene =\nexports.deku = require('./application')\n\n/**\n * Render scenes to the DOM.\n */\n\nif (typeof document !== 'undefined') {\n  exports.render = require('./render')\n}\n\n/**\n * Render scenes to a string\n */\n\nexports.renderString = require('./stringify')\n\n/**\n * Create virtual elements.\n */\n\nexports.element =\nexports.dom = require('./virtual')\n","/**\n * Dependencies.\n */\n\nvar raf = require('component-raf')\nvar Pool = require('dom-pool')\nvar walk = require('dom-walk')\nvar isDom = require('is-dom')\nvar uid = require('get-uid')\nvar throttle = require('per-frame')\nvar keypath = require('object-path')\nvar type = require('component-type')\nvar utils = require('./utils')\nvar svg = require('./svg')\nvar defaults = utils.defaults\nvar forEach = require('fast.js/forEach')\nvar assign = require('fast.js/object/assign')\nvar reduce = require('fast.js/reduce')\nvar isPromise = require('is-promise')\n\n/**\n * All of the events can bind to\n */\n\nvar events = {\n  onBlur: 'blur',\n  onChange: 'change',\n  onClick: 'click',\n  onContextMenu: 'contextmenu',\n  onCopy: 'copy',\n  onCut: 'cut',\n  onDoubleClick: 'dblclick',\n  onDrag: 'drag',\n  onDragEnd: 'dragend',\n  onDragEnter: 'dragenter',\n  onDragExit: 'dragexit',\n  onDragLeave: 'dragleave',\n  onDragOver: 'dragover',\n  onDragStart: 'dragstart',\n  onDrop: 'drop',\n  onFocus: 'focus',\n  onInput: 'input',\n  onKeyDown: 'keydown',\n  onKeyUp: 'keyup',\n  onMouseDown: 'mousedown',\n  onMouseEnter: 'mouseenter',\n  onMouseLeave: 'mouseleave',\n  onMouseMove: 'mousemove',\n  onMouseOut: 'mouseout',\n  onMouseOver: 'mouseover',\n  onMouseUp: 'mouseup',\n  onPaste: 'paste',\n  onScroll: 'scroll',\n  onSubmit: 'submit',\n  onTouchCancel: 'touchcancel',\n  onTouchEnd: 'touchend',\n  onTouchMove: 'touchmove',\n  onTouchStart: 'touchstart'\n}\n\n/**\n * These elements won't be pooled\n */\n\nvar avoidPooling = ['input', 'textarea'];\n\n/**\n * Expose `dom`.\n */\n\nmodule.exports = render\n\n/**\n * Render an app to the DOM\n *\n * @param {Application} app\n * @param {HTMLElement} container\n * @param {Object} opts\n *\n * @return {Object}\n */\n\nfunction render (app, container, opts) {\n  var frameId\n  var isRendering\n  var rootId = 'root'\n  var currentElement\n  var currentNativeElement\n  var connections = {}\n  var components = {}\n  var entities = {}\n  var pools = {}\n  var handlers = {}\n  var mountQueue = []\n  var children = {}\n  children[rootId] = {}\n\n  if (!isDom(container)) {\n    throw new Error('Container element must be a DOM element')\n  }\n\n  /**\n   * Rendering options. Batching is only ever really disabled\n   * when running tests, and pooling can be disabled if the user\n   * is doing something stupid with the DOM in their components.\n   */\n\n  var options = defaults(assign({}, app.options || {}, opts || {}), {\n    pooling: true,\n    batching: true,\n    validateProps: false\n  })\n\n  /**\n   * Listen to DOM events\n   */\n\n  addNativeEventListeners()\n\n  /**\n   * Watch for changes to the app so that we can update\n   * the DOM as needed.\n   */\n\n  app.on('unmount', onunmount)\n  app.on('mount', onmount)\n  app.on('source', onupdate)\n\n  /**\n   * If the app has already mounted an element, we can just\n   * render that straight away.\n   */\n\n  if (app.element) render()\n\n  /**\n   * Teardown the DOM rendering so that it stops\n   * rendering and everything can be garbage collected.\n   */\n\n  function teardown () {\n    removeNativeEventListeners()\n    removeNativeElement()\n    app.off('unmount', onunmount)\n    app.off('mount', onmount)\n    app.off('source', onupdate)\n  }\n\n  /**\n   * Swap the current rendered node with a new one that is rendered\n   * from the new virtual element mounted on the app.\n   *\n   * @param {VirtualElement} element\n   */\n\n  function onmount () {\n    invalidate()\n  }\n\n  /**\n   * If the app unmounts an element, we should clear out the current\n   * rendered element. This will remove all the entities.\n   */\n\n  function onunmount () {\n    removeNativeElement()\n    currentElement = null\n  }\n\n  /**\n   * Update all components that are bound to the source\n   *\n   * @param {String} name\n   * @param {*} data\n   */\n\n  function onupdate (name, data) {\n    if (!connections[name]) return;\n    connections[name].forEach(function(update) {\n      update(data)\n    })\n  }\n\n  /**\n   * Render and mount a component to the native dom.\n   *\n   * @param {Entity} entity\n   * @return {HTMLElement}\n   */\n\n  function mountEntity (entity) {\n    register(entity)\n    setSources(entity)\n    children[entity.id] = {}\n    entities[entity.id] = entity\n\n    // commit initial state and props.\n    commit(entity)\n\n    // callback before mounting.\n    trigger('beforeMount', entity, [entity.context])\n    trigger('beforeRender', entity, [entity.context])\n\n    // render virtual element.\n    var virtualElement = renderEntity(entity)\n    // create native element.\n    var nativeElement = toNative(entity.id, '0', virtualElement)\n\n    entity.virtualElement = virtualElement\n    entity.nativeElement = nativeElement\n\n    // Fire afterRender and afterMount hooks at the end\n    // of the render cycle\n    mountQueue.push(entity.id)\n\n    return nativeElement\n  }\n\n  /**\n   * Remove a component from the native dom.\n   *\n   * @param {Entity} entity\n   */\n\n  function unmountEntity (entityId) {\n    var entity = entities[entityId]\n    if (!entity) return\n    trigger('beforeUnmount', entity, [entity.context, entity.nativeElement])\n    unmountChildren(entityId)\n    removeAllEvents(entityId)\n    var componentEntities = components[entityId].entities;\n    delete componentEntities[entityId]\n    delete components[entityId]\n    delete entities[entityId]\n    delete children[entityId]\n  }\n\n  /**\n   * Render the entity and make sure it returns a node\n   *\n   * @param {Entity} entity\n   *\n   * @return {VirtualTree}\n   */\n\n  function renderEntity (entity) {\n    var component = entity.component\n    if (!component.render) throw new Error('Component needs a render function')\n    var result = component.render(entity.context, setState(entity))\n    if (!result) throw new Error('Render function must return an element.')\n    return result\n  }\n\n  /**\n   * Whenever setState or setProps is called, we mark the entity\n   * as dirty in the renderer. This lets us optimize the re-rendering\n   * and skip components that definitely haven't changed.\n   *\n   * @param {Entity} entity\n   *\n   * @return {Function} A curried function for updating the state of an entity\n   */\n\n  function setState (entity) {\n    return function (nextState) {\n      updateEntityStateAsync(entity, nextState)\n    }\n  }\n\n  /**\n   * Tell the app it's dirty and needs to re-render. If batching is disabled\n   * we can just trigger a render immediately, otherwise we'll wait until\n   * the next available frame.\n   */\n\n  function invalidate () {\n    if (!options.batching) {\n      if (!isRendering) render()\n    } else {\n      if (!frameId) frameId = raf(render)\n    }\n  }\n\n  /**\n   * Update the DOM. If the update fails we stop the loop\n   * so we don't get errors on every frame.\n   *\n   * @api public\n   */\n\n  function render () {\n    // If this is called synchronously we need to\n    // cancel any pending future updates\n    clearFrame()\n\n    // If the rendering from the previous frame is still going,\n    // we'll just wait until the next frame. Ideally renders should\n    // not take over 16ms to stay within a single frame, but this should\n    // catch it if it does.\n    if (isRendering) {\n      frameId = raf(render)\n      return\n    } else {\n      isRendering = true\n    }\n\n    // 1. If there isn't a native element rendered for the current mounted element\n    // then we need to create it from scratch.\n    // 2. If a new element has been mounted, we should diff them.\n    // 3. We should update check all child components for changes.\n    if (!currentNativeElement) {\n      currentElement = app.element\n      currentNativeElement = toNative(rootId, '0', currentElement)\n      if (container.children.length > 0) {\n        console.info('deku: The container element is not empty. These elements will be removed. Read more: http://cl.ly/b0Sr')\n      }\n      if (container === document.body) {\n        console.warn('deku: Using document.body is allowed but it can cause some issues. Read more: http://cl.ly/b0SC')\n      }\n      removeAllChildren(container);\n      container.appendChild(currentNativeElement)\n    } else if (currentElement !== app.element) {\n      currentNativeElement = patch(rootId, currentElement, app.element, currentNativeElement)\n      currentElement = app.element\n      updateChildren(rootId)\n    } else {\n      updateChildren(rootId)\n    }\n\n    // Call mount events on all new entities\n    flushMountQueue()\n\n    // Allow rendering again.\n    isRendering = false\n  }\n\n  /**\n   * Call hooks for all new entities that have been created in\n   * the last render from the bottom up.\n   */\n\n  function flushMountQueue () {\n    var entityId\n    while (entityId = mountQueue.pop()) {\n      var entity = entities[entityId]\n      trigger('afterRender', entity, [entity.context, entity.nativeElement])\n      triggerUpdate('afterMount', entity, [entity.context, entity.nativeElement, setState(entity)])\n    }\n  }\n\n  /**\n   * Clear the current scheduled frame\n   */\n\n  function clearFrame () {\n    if (!frameId) return\n    raf.cancel(frameId)\n    frameId = 0\n  }\n\n  /**\n   * Update a component.\n   *\n   * The entity is just the data object for a component instance.\n   *\n   * @param {String} id Component instance id.\n   */\n\n  function updateEntity (entityId) {\n    var entity = entities[entityId]\n    setSources(entity)\n\n    if (!shouldUpdate(entity)) return updateChildren(entityId)\n\n    var currentTree = entity.virtualElement\n    var nextProps = entity.pendingProps\n    var nextState = entity.pendingState\n    var previousState = entity.context.state\n    var previousProps = entity.context.props\n\n    // hook before rendering. could modify state just before the render occurs.\n    trigger('beforeUpdate', entity, [entity.context, nextProps, nextState])\n    trigger('beforeRender', entity, [entity.context])\n\n    // commit state and props.\n    commit(entity)\n\n    // re-render.\n    var nextTree = renderEntity(entity)\n\n    // if the tree is the same we can just skip this component\n    // but we should still check the children to see if they're dirty.\n    // This allows us to memoize the render function of components.\n    if (nextTree === currentTree) return updateChildren(entityId)\n\n    // apply new virtual tree to native dom.\n    entity.nativeElement = patch(entityId, currentTree, nextTree, entity.nativeElement)\n    entity.virtualElement = nextTree\n    updateChildren(entityId)\n\n    // trigger render hook\n    trigger('afterRender', entity, [entity.context, entity.nativeElement])\n\n    // trigger afterUpdate after all children have updated.\n    triggerUpdate('afterUpdate', entity, [entity.context, previousProps, previousState])\n  }\n\n  /**\n   * Update all the children of an entity.\n   *\n   * @param {String} id Component instance id.\n   */\n\n  function updateChildren (entityId) {\n    forEach(children[entityId], function (childId) {\n      updateEntity(childId)\n    })\n  }\n\n  /**\n   * Remove all of the child entities of an entity\n   *\n   * @param {Entity} entity\n   */\n\n  function unmountChildren (entityId) {\n    forEach(children[entityId], function (childId) {\n      unmountEntity(childId)\n    })\n  }\n\n  /**\n   * Remove the root element. If this is called synchronously we need to\n   * cancel any pending future updates.\n   */\n\n  function removeNativeElement () {\n    clearFrame()\n    removeElement(rootId, '0', currentNativeElement)\n    currentNativeElement = null\n  }\n\n  /**\n   * Create a native element from a virtual element.\n   *\n   * @param {String} entityId\n   * @param {String} path\n   * @param {Object} vnode\n   *\n   * @return {HTMLDocumentFragment}\n   */\n\n  function toNative (entityId, path, vnode) {\n    switch (vnode.type) {\n      case 'text': return toNativeText(vnode)\n      case 'element': return toNativeElement(entityId, path, vnode)\n      case 'component': return toNativeComponent(entityId, path, vnode)\n    }\n  }\n\n  /**\n   * Create a native text element from a virtual element.\n   *\n   * @param {Object} vnode\n   */\n\n  function toNativeText (vnode) {\n    return document.createTextNode(vnode.data)\n  }\n\n  /**\n   * Create a native element from a virtual element.\n   */\n\n  function toNativeElement (entityId, path, vnode) {\n    var attributes = vnode.attributes\n    var children = vnode.children\n    var tagName = vnode.tagName\n    var el\n\n    // create element either from pool or fresh.\n    if (!options.pooling || !canPool(tagName)) {\n      if (svg.isElement(tagName)) {\n        el = document.createElementNS(svg.namespace, tagName)\n      } else {\n        el = document.createElement(tagName)\n      }\n    } else {\n      var pool = getPool(tagName)\n      el = cleanup(pool.pop())\n      if (el.parentNode) el.parentNode.removeChild(el)\n    }\n\n    // set attributes.\n    forEach(attributes, function (value, name) {\n      setAttribute(entityId, path, el, name, value)\n    })\n\n    // store keys on the native element for fast event handling.\n    el.__entity__ = entityId\n    el.__path__ = path\n\n    // add children.\n    forEach(children, function (child, i) {\n      var childEl = toNative(entityId, path + '.' + i, child)\n      if (!childEl.parentNode) el.appendChild(childEl)\n    })\n\n    return el\n  }\n\n  /**\n   * Create a native element from a component.\n   */\n\n  function toNativeComponent (entityId, path, vnode) {\n    var child = new Entity(vnode.component, vnode.props, entityId)\n    children[entityId][path] = child.id\n    return mountEntity(child)\n  }\n\n  /**\n   * Patch an element with the diff from two trees.\n   */\n\n  function patch (entityId, prev, next, el) {\n    return diffNode('0', entityId, prev, next, el)\n  }\n\n  /**\n   * Create a diff between two trees of nodes.\n   */\n\n  function diffNode (path, entityId, prev, next, el) {\n    // Type changed. This could be from element->text, text->ComponentA,\n    // ComponentA->ComponentB etc. But NOT div->span. These are the same type\n    // (ElementNode) but different tag name.\n    if (prev.type !== next.type) return replaceElement(entityId, path, el, next)\n\n    switch (next.type) {\n      case 'text': return diffText(prev, next, el)\n      case 'element': return diffElement(path, entityId, prev, next, el)\n      case 'component': return diffComponent(path, entityId, prev, next, el)\n    }\n  }\n\n  /**\n   * Diff two text nodes and update the element.\n   */\n\n  function diffText (previous, current, el) {\n    if (current.data !== previous.data) el.data = current.data\n    return el\n  }\n\n  /**\n   * Diff the children of an ElementNode.\n   */\n\n  function diffChildren (path, entityId, prev, next, el) {\n    var positions = []\n    var hasKeys = false\n    var childNodes = Array.prototype.slice.apply(el.childNodes)\n    var leftKeys = reduce(prev.children, keyMapReducer, {})\n    var rightKeys = reduce(next.children, keyMapReducer, {})\n    var currentChildren = assign({}, children[entityId])\n\n    function keyMapReducer (acc, child) {\n      if (child.key != null) {\n        acc[child.key] = child\n        hasKeys = true\n      }\n      return acc\n    }\n\n    // Diff all of the nodes that have keys. This lets us re-used elements\n    // instead of overriding them and lets us move them around.\n    if (hasKeys) {\n\n      // Removals\n      forEach(leftKeys, function (leftNode, key) {\n        if (rightKeys[key] == null) {\n          var leftPath = path + '.' + leftNode.index\n          removeElement(\n            entityId,\n            leftPath,\n            childNodes[leftNode.index]\n          )\n        }\n      })\n\n      // Update nodes\n      forEach(rightKeys, function (rightNode, key) {\n        var leftNode = leftKeys[key]\n\n        // We only want updates for now\n        if (leftNode == null) return\n\n        var leftPath = path + '.' + leftNode.index\n\n        // Updated\n        positions[rightNode.index] = diffNode(\n          leftPath,\n          entityId,\n          leftNode,\n          rightNode,\n          childNodes[leftNode.index]\n        )\n      })\n\n      // Update the positions of all child components and event handlers\n      forEach(rightKeys, function (rightNode, key) {\n        var leftNode = leftKeys[key]\n\n        // We just want elements that have moved around\n        if (leftNode == null || leftNode.index === rightNode.index) return\n\n        var rightPath = path + '.' + rightNode.index\n        var leftPath = path + '.' + leftNode.index\n\n        // Update all the child component path positions to match\n        // the latest positions if they've changed. This is a bit hacky.\n        forEach(currentChildren, function (childId, childPath) {\n          if (leftPath === childPath) {\n            delete children[entityId][childPath]\n            children[entityId][rightPath] = childId\n          }\n        })\n      })\n\n      // Now add all of the new nodes last in case their path\n      // would have conflicted with one of the previous paths.\n      forEach(rightKeys, function (rightNode, key) {\n        var rightPath = path + '.' + rightNode.index\n        if (leftKeys[key] == null) {\n          positions[rightNode.index] = toNative(\n            entityId,\n            rightPath,\n            rightNode\n          )\n        }\n      })\n\n    } else {\n      var maxLength = Math.max(prev.children.length, next.children.length)\n\n      // Now diff all of the nodes that don't have keys\n      for (var i = 0; i < maxLength; i++) {\n        var leftNode = prev.children[i]\n        var rightNode = next.children[i]\n\n        // Removals\n        if (rightNode == null) {\n          removeElement(\n            entityId,\n            path + '.' + leftNode.index,\n            childNodes[leftNode.index]\n          )\n        }\n\n        // New Node\n        if (leftNode == null) {\n          positions[rightNode.index] = toNative(\n            entityId,\n            path + '.' + rightNode.index,\n            rightNode\n          )\n        }\n\n        // Updated\n        if (leftNode && rightNode) {\n          positions[leftNode.index] = diffNode(\n            path + '.' + leftNode.index,\n            entityId,\n            leftNode,\n            rightNode,\n            childNodes[leftNode.index]\n          )\n        }\n      }\n    }\n\n    // Reposition all the elements\n    forEach(positions, function (childEl, newPosition) {\n      var target = el.childNodes[newPosition]\n      if (childEl !== target) {\n        if (target) {\n          el.insertBefore(childEl, target)\n        } else {\n          el.appendChild(childEl)\n        }\n      }\n    })\n  }\n\n  /**\n   * Diff the attributes and add/remove them.\n   */\n\n  function diffAttributes (prev, next, el, entityId, path) {\n    var nextAttrs = next.attributes\n    var prevAttrs = prev.attributes\n\n    // add new attrs\n    forEach(nextAttrs, function (value, name) {\n      if (events[name] || !(name in prevAttrs) || prevAttrs[name] !== value) {\n        setAttribute(entityId, path, el, name, value)\n      }\n    })\n\n    // remove old attrs\n    forEach(prevAttrs, function (value, name) {\n      if (!(name in nextAttrs)) {\n        removeAttribute(entityId, path, el, name)\n      }\n    })\n  }\n\n  /**\n   * Update a component with the props from the next node. If\n   * the component type has changed, we'll just remove the old one\n   * and replace it with the new component.\n   */\n\n  function diffComponent (path, entityId, prev, next, el) {\n    if (next.component !== prev.component) {\n      return replaceElement(entityId, path, el, next)\n    } else {\n      var targetId = children[entityId][path]\n\n      // This is a hack for now\n      if (targetId) {\n        updateEntityProps(targetId, next.props)\n      }\n\n      return el\n    }\n  }\n\n  /**\n   * Diff two element nodes.\n   */\n\n  function diffElement (path, entityId, prev, next, el) {\n    if (next.tagName !== prev.tagName) return replaceElement(entityId, path, el, next)\n    diffAttributes(prev, next, el, entityId, path)\n    diffChildren(path, entityId, prev, next, el)\n    return el\n  }\n\n  /**\n   * Removes an element from the DOM and unmounts and components\n   * that are within that branch\n   *\n   * side effects:\n   *   - removes element from the DOM\n   *   - removes internal references\n   *\n   * @param {String} entityId\n   * @param {String} path\n   * @param {HTMLElement} el\n   */\n\n  function removeElement (entityId, path, el) {\n    var childrenByPath = children[entityId]\n    var childId = childrenByPath[path]\n    var entityHandlers = handlers[entityId] || {}\n    var removals = []\n\n    // If the path points to a component we should use that\n    // components element instead, because it might have moved it.\n    if (childId) {\n      var child = entities[childId]\n      el = child.nativeElement\n      unmountEntity(childId)\n      removals.push(path)\n    } else {\n\n      // Just remove the text node\n      if (!isElement(el)) return el.parentNode.removeChild(el)\n\n      // Then we need to find any components within this\n      // branch and unmount them.\n      forEach(childrenByPath, function (childId, childPath) {\n        if (childPath === path || isWithinPath(path, childPath)) {\n          unmountEntity(childId)\n          removals.push(childPath)\n        }\n      })\n\n      // Remove all events at this path or below it\n      forEach(entityHandlers, function (fn, handlerPath) {\n        if (handlerPath === path || isWithinPath(path, handlerPath)) {\n          removeEvent(entityId, handlerPath)\n        }\n      })\n    }\n\n    // Remove the paths from the object without touching the\n    // old object. This keeps the object using fast properties.\n    forEach(removals, function (path) {\n      delete children[entityId][path]\n    })\n\n    // Remove it from the DOM\n    el.parentNode.removeChild(el)\n\n    // Return all of the elements in this node tree to the pool\n    // so that the elements can be re-used.\n    if (options.pooling) {\n      walk(el, function (node) {\n        if (!isElement(node) || !canPool(node.tagName)) return\n        getPool(node.tagName.toLowerCase()).push(node)\n      })\n    }\n  }\n\n  /**\n   * Replace an element in the DOM. Removing all components\n   * within that element and re-rendering the new virtual node.\n   *\n   * @param {Entity} entity\n   * @param {String} path\n   * @param {HTMLElement} el\n   * @param {Object} vnode\n   *\n   * @return {void}\n   */\n\n  function replaceElement (entityId, path, el, vnode) {\n    var parent = el.parentNode\n    var index = Array.prototype.indexOf.call(parent.childNodes, el)\n\n    // remove the previous element and all nested components. This\n    // needs to happen before we create the new element so we don't\n    // get clashes on the component paths.\n    removeElement(entityId, path, el)\n\n    // then add the new element in there\n    var newEl = toNative(entityId, path, vnode)\n    var target = parent.childNodes[index]\n\n    if (target) {\n      parent.insertBefore(newEl, target)\n    } else {\n      parent.appendChild(newEl)\n    }\n\n    // walk up the tree and update all `entity.nativeElement` references.\n    if (entityId !== 'root' && path === '0') {\n      updateNativeElement(entityId, newEl)\n    }\n\n    return newEl\n  }\n\n  /**\n   * Update all entities in a branch that have the same nativeElement. This\n   * happens when a component has another component as it's root node.\n   *\n   * @param {String} entityId\n   * @param {HTMLElement} newEl\n   *\n   * @return {void}\n   */\n\n  function updateNativeElement (entityId, newEl) {\n    var target = entities[entityId]\n    if (target.ownerId === 'root') return\n    if (children[target.ownerId]['0'] === entityId) {\n      entities[target.ownerId].nativeElement = newEl\n      updateNativeElement(target.ownerId, newEl)\n    }\n  }\n\n  /**\n   * Set the attribute of an element, performing additional transformations\n   * dependning on the attribute name\n   *\n   * @param {HTMLElement} el\n   * @param {String} name\n   * @param {String} value\n   */\n\n  function setAttribute (entityId, path, el, name, value) {\n    if (events[name]) {\n      addEvent(entityId, path, events[name], value)\n      return\n    }\n    switch (name) {\n      case 'checked':\n      case 'disabled':\n      case 'selected':\n        el[name] = true\n        break\n      case 'innerHTML':\n      case 'value':\n        el[name] = value\n        break\n      case svg.isAttribute(name):\n        el.setAttributeNS(svg.namespace, name, value)\n        break\n      default:\n        el.setAttribute(name, value)\n        break\n    }\n  }\n\n  /**\n   * Remove an attribute, performing additional transformations\n   * dependning on the attribute name\n   *\n   * @param {HTMLElement} el\n   * @param {String} name\n   */\n\n  function removeAttribute (entityId, path, el, name) {\n    if (events[name]) {\n      removeEvent(entityId, path, events[name])\n      return\n    }\n    switch (name) {\n      case 'checked':\n      case 'disabled':\n      case 'selected':\n        el[name] = false\n        break\n      case 'innerHTML':\n      case 'value':\n        el[name] = \"\"\n        break\n      default:\n        el.removeAttribute(name)\n        break\n    }\n  }\n\n  /**\n   * Checks to see if one tree path is within\n   * another tree path. Example:\n   *\n   * 0.1 vs 0.1.1 = true\n   * 0.2 vs 0.3.5 = false\n   *\n   * @param {String} target\n   * @param {String} path\n   *\n   * @return {Boolean}\n   */\n\n  function isWithinPath (target, path) {\n    return path.indexOf(target + '.') === 0\n  }\n\n  /**\n   * Is the DOM node an element node\n   *\n   * @param {HTMLElement} el\n   *\n   * @return {Boolean}\n   */\n\n  function isElement (el) {\n    return !!el.tagName\n  }\n\n  /**\n   * Get the pool for a tagName, creating it if it\n   * doesn't exist.\n   *\n   * @param {String} tagName\n   *\n   * @return {Pool}\n   */\n\n  function getPool (tagName) {\n    var pool = pools[tagName]\n    if (!pool) {\n      var poolOpts = svg.isElement(tagName) ?\n        { namespace: svg.namespace, tagName: tagName } :\n        { tagName: tagName }\n      pool = pools[tagName] = new Pool(poolOpts)\n    }\n    return pool\n  }\n\n  /**\n   * Clean up previously used native element for reuse.\n   *\n   * @param {HTMLElement} el\n   */\n\n  function cleanup (el) {\n    removeAllChildren(el)\n    removeAllAttributes(el)\n    return el\n  }\n\n  /**\n   * Remove all the attributes from a node\n   *\n   * @param {HTMLElement} el\n   */\n\n  function removeAllAttributes (el) {\n    for (var i = el.attributes.length - 1; i >= 0; i--) {\n      var name = el.attributes[i].name\n      el.removeAttribute(name)\n    }\n  }\n\n  /**\n   * Remove all the child nodes from an element\n   *\n   * @param {HTMLElement} el\n   */\n\n  function removeAllChildren (el) {\n    while (el.firstChild) el.removeChild(el.firstChild)\n  }\n\n  /**\n   * Trigger a hook on a component.\n   *\n   * @param {String} name Name of hook.\n   * @param {Entity} entity The component instance.\n   * @param {Array} args To pass along to hook.\n   */\n\n  function trigger (name, entity, args) {\n    if (typeof entity.component[name] !== 'function') return\n    return entity.component[name].apply(null, args)\n  }\n\n  /**\n   * Trigger a hook on the component and allow state to be\n   * updated too.\n   *\n   * @param {String} name\n   * @param {Object} entity\n   * @param {Array} args\n   *\n   * @return {void}\n   */\n\n  function triggerUpdate (name, entity, args) {\n    var update = setState(entity)\n    args.push(update)\n    var result = trigger(name, entity, args)\n    if (result) {\n      updateEntityStateAsync(entity, result)\n    }\n  }\n\n  /**\n   * Update the entity state using a promise\n   *\n   * @param {Entity} entity\n   * @param {Promise} promise\n   */\n\n  function updateEntityStateAsync (entity, value) {\n    if (isPromise(value)) {\n      value.then(function (newState) {\n        updateEntityState(entity, newState)\n      })\n    } else {\n      updateEntityState(entity, value)\n    }\n  }\n\n  /**\n   * Update an entity to match the latest rendered vode. We always\n   * replace the props on the component when composing them. This\n   * will trigger a re-render on all children below this point.\n   *\n   * @param {Entity} entity\n   * @param {String} path\n   * @param {Object} vnode\n   *\n   * @return {void}\n   */\n\n  function updateEntityProps (entityId, nextProps) {\n    var entity = entities[entityId]\n    entity.pendingProps = nextProps\n    entity.dirty = true\n    invalidate()\n  }\n\n  /**\n   * Update component instance state.\n   */\n\n  function updateEntityState (entity, nextState) {\n    entity.pendingState = assign(entity.pendingState, nextState)\n    entity.dirty = true\n    invalidate()\n  }\n\n  /**\n   * Commit props and state changes to an entity.\n   */\n\n  function commit (entity) {\n    entity.context = {\n      state: entity.pendingState,\n      props: entity.pendingProps,\n      id: entity.id\n    }\n    entity.pendingState = assign({}, entity.context.state)\n    entity.pendingProps = assign({}, entity.context.props)\n    validateProps(entity.context.props, entity.propTypes)\n    entity.dirty = false\n  }\n\n  /**\n   * Try to avoid creating new virtual dom if possible.\n   *\n   * Later we may expose this so you can override, but not there yet.\n   */\n\n  function shouldUpdate (entity) {\n    if (!entity.dirty) return false\n    if (!entity.component.shouldUpdate) return true\n    var nextProps = entity.pendingProps\n    var nextState = entity.pendingState\n    var bool = entity.component.shouldUpdate(entity.context, nextProps, nextState)\n    return bool\n  }\n\n  /**\n   * Register an entity.\n   *\n   * This is mostly to pre-preprocess component properties and values chains.\n   *\n   * The end result is for every component that gets mounted,\n   * you create a set of IO nodes in the network from the `value` definitions.\n   *\n   * @param {Component} component\n   */\n\n  function register (entity) {\n    var component = entity.component\n    // all entities for this component type.\n    var entities = component.entities = component.entities || {}\n    // add entity to component list\n    entities[entity.id] = entity\n    // map to component so you can remove later.\n    components[entity.id] = component;\n\n    // get 'class-level' sources.\n    var sources = component.sources\n    if (sources) return\n\n    var map = component.sourceToPropertyName = {}\n    component.sources = sources = []\n    var propTypes = component.propTypes\n    for (var name in propTypes) {\n      var data = propTypes[name]\n      if (!data) continue\n      if (!data.source) continue\n      sources.push(data.source)\n      map[data.source] = name\n    }\n\n    // send value updates to all component instances.\n    sources.forEach(function (source) {\n      connections[source] = connections[source] || []\n      connections[source].push(update)\n\n      function update (data) {\n        var prop = map[source]\n        for (var entityId in entities) {\n          var entity = entities[entityId]\n          var changes = {}\n          changes[prop] = data\n          updateEntityProps(entityId, assign(entity.pendingProps, changes))\n        }\n      }\n    })\n  }\n\n  /**\n   * Set the initial source value on the entity\n   *\n   * @param {Entity} entity\n   */\n\n  function setSources (entity) {\n    var component = entity.component\n    var map = component.sourceToPropertyName\n    var sources = component.sources\n    sources.forEach(function (source) {\n      var name = map[source]\n      if (entity.pendingProps[name] != null) return\n      entity.pendingProps[name] = app.sources[source] // get latest value plugged into global store\n    })\n  }\n\n  /**\n   * Add all of the DOM event listeners\n   */\n\n  function addNativeEventListeners () {\n    forEach(events, function (eventType) {\n      document.body.addEventListener(eventType, handleEvent, true)\n    })\n  }\n\n  /**\n   * Add all of the DOM event listeners\n   */\n\n  function removeNativeEventListeners () {\n    forEach(events, function (eventType) {\n      document.body.removeEventListener(eventType, handleEvent, true)\n    })\n  }\n\n  /**\n   * Handle an event that has occured within the container\n   *\n   * @param {Event} event\n   */\n\n  function handleEvent (event) {\n    var target = event.target\n    var entityId = target.__entity__\n    var eventType = event.type\n\n    // Walk up the DOM tree and see if there is a handler\n    // for this event type higher up.\n    while (target && target.__entity__ === entityId) {\n      var fn = keypath.get(handlers, [entityId, target.__path__, eventType])\n      if (fn) {\n        event.delegateTarget = target\n        fn(event)\n        break\n      }\n      target = target.parentNode\n    }\n  }\n\n  /**\n   * Bind events for an element, and all it's rendered child elements.\n   *\n   * @param {String} path\n   * @param {String} event\n   * @param {Function} fn\n   */\n\n  function addEvent (entityId, path, eventType, fn) {\n    keypath.set(handlers, [entityId, path, eventType], throttle(function (e) {\n      var entity = entities[entityId]\n      if (entity) {\n        var update = setState(entity)\n        var result = fn.call(null, e, entity.context, update)\n        if (result) {\n          updateEntityStateAsync(entity, result)\n        }\n      } else {\n        fn.call(null, e)\n      }\n    }))\n  }\n\n  /**\n   * Unbind events for a entityId\n   *\n   * @param {String} entityId\n   */\n\n  function removeEvent (entityId, path, eventType) {\n    var args = [entityId]\n    if (path) args.push(path)\n    if (eventType) args.push(eventType)\n    keypath.del(handlers, args)\n  }\n\n  /**\n   * Unbind all events from an entity\n   *\n   * @param {Entity} entity\n   */\n\n  function removeAllEvents (entityId) {\n    keypath.del(handlers, [entityId])\n  }\n\n  /**\n   * Validate the current properties. These simple validations\n   * make it easier to ensure the correct props are passed in.\n   *\n   * Available rules include:\n   *\n   * type: {String} string | array | object | boolean | number | date | function\n   *       {Array} An array of types mentioned above\n   *       {Function} fn(value) should return `true` to pass in\n   * expects: [] An array of values this prop could equal\n   * optional: Boolean\n   */\n\n  function validateProps (props, rules, optPrefix) {\n    var prefix = optPrefix || ''\n    if (!options.validateProps) return\n    forEach(rules, function (options, name) {\n      if (!options) {\n        throw new Error('deku: propTypes should have an options object for each type')\n      }\n\n      var propName = prefix ? prefix + '.' + name : name\n      var value = keypath.get(props, name)\n      var valueType = type(value)\n      var typeFormat = type(options.type)\n      var optional = (options.optional === true)\n\n      // If it's optional and doesn't exist\n      if (optional && value == null) {\n        return\n      }\n\n      // If it's required and doesn't exist\n      if (!optional && value == null) {\n        throw new TypeError('Missing property: ' + propName)\n      }\n\n      // It's a nested type\n      if (typeFormat === 'object') {\n        validateProps(value, options.type, propName)\n        return\n      }\n\n      // If it's the incorrect type\n      if (typeFormat === 'string' && valueType !== options.type) {\n        throw new TypeError('Invalid property type: ' + propName)\n      }\n\n      // If type is validate function\n      if (typeFormat === 'function' && !options.type(value)) {\n        throw new TypeError('Invalid property type: ' + propName)\n      }\n\n      // if type is array of possible types\n      if (typeFormat === 'array' && options.type.indexOf(valueType) < 0) {\n        throw new TypeError('Invalid property type: ' + propName)\n      }\n\n      // If it's an invalid value\n      if (options.expects && options.expects.indexOf(value) < 0) {\n        throw new TypeError('Invalid property value: ' + propName)\n      }\n    })\n\n    // Now check for props that haven't been defined\n    forEach(props, function (value, key) {\n      // props.children is always passed in, even if it's not defined\n      if (key === 'children') return\n      if (!rules[key]) throw new Error('Unexpected property: ' + key)\n    })\n  }\n\n  /**\n   * Used for debugging to inspect the current state without\n   * us needing to explicitly manage storing/updating references.\n   *\n   * @return {Object}\n   */\n\n  function inspect () {\n    return {\n      entities: entities,\n      pools: pools,\n      handlers: handlers,\n      connections: connections,\n      currentElement: currentElement,\n      options: options,\n      app: app,\n      container: container,\n      children: children\n    }\n  }\n\n  /**\n   * Return an object that lets us completely remove the automatic\n   * DOM rendering and export debugging tools.\n   */\n\n  return {\n    remove: teardown,\n    inspect: inspect\n  }\n}\n\n/**\n * A rendered component instance.\n *\n * This manages the lifecycle, props and state of the component.\n * It's basically just a data object for more straightfoward lookup.\n *\n * @param {Component} component\n * @param {Object} props\n */\n\nfunction Entity (component, props, ownerId) {\n  this.id = uid()\n  this.ownerId = ownerId\n  this.component = component\n  this.propTypes = component.propTypes || {}\n  this.context = {}\n  this.context.id = this.id;\n  this.context.props = defaults(props || {}, component.defaultProps || {})\n  this.context.state = this.component.initialState ? this.component.initialState(this.context.props) : {}\n  this.pendingProps = assign({}, this.context.props)\n  this.pendingState = assign({}, this.context.state)\n  this.dirty = false\n  this.virtualElement = null\n  this.nativeElement = null\n  this.displayName = component.name || 'Component'\n}\n\n/**\n * Should we pool an element?\n */\n\nfunction canPool(tagName) {\n  return avoidPooling.indexOf(tagName) < 0\n}\n\n/**\n * Get a nested node using a path\n *\n * @param {HTMLElement} el   The root node '0'\n * @param {String} path The path string eg. '0.2.43'\n */\n\nfunction getNodeAtPath(el, path) {\n  var parts = path.split('.')\n  parts.shift()\n  while (parts.length) {\n    el = el.childNodes[parts.pop()]\n  }\n  return el\n}\n","var utils = require('./utils')\nvar defaults = utils.defaults\n\n/**\n * Expose `stringify`.\n */\n\nmodule.exports = function (app) {\n  if (!app.element) {\n    throw new Error('No element mounted')\n  }\n\n  /**\n   * Render to string.\n   *\n   * @param {Component} component\n   * @param {Object} [props]\n   * @return {String}\n   */\n\n  function stringify (component, optProps) {\n    var propTypes = component.propTypes || {}\n    var props = defaults(optProps || {}, component.defaultProps || {})\n    var state = component.initialState ? component.initialState(props) : {}\n\n    for (var name in propTypes) {\n      var options = propTypes[name]\n      if (options.source) {\n        props[name] = app.sources[options.source]\n      }\n    }\n\n    if (component.beforeMount) component.beforeMount({ props: props, state: state })\n    if (component.beforeRender) component.beforeRender({ props: props, state: state })\n    var node = component.render({ props: props, state: state })\n    return stringifyNode(node, '0')\n  }\n\n  /**\n   * Render a node to a string\n   *\n   * @param {Node} node\n   * @param {Tree} tree\n   *\n   * @return {String}\n   */\n\n  function stringifyNode (node, path) {\n    switch (node.type) {\n      case 'text': return node.data\n      case 'element':\n        var children = node.children\n        var attributes = node.attributes\n        var tagName = node.tagName\n        var innerHTML = attributes.innerHTML\n        var str = '<' + tagName + attrs(attributes) + '>'\n\n        if (innerHTML) {\n          str += innerHTML\n        } else {\n          for (var i = 0, n = children.length; i < n; i++) {\n            str += stringifyNode(children[i], path + '.' + i)\n          }\n        }\n\n        str += '</' + tagName + '>'\n        return str\n      case 'component': return stringify(node.component, node.props)\n    }\n\n    throw new Error('Invalid type')\n  }\n\n  return stringifyNode(app.element, '0')\n}\n\n/**\n * HTML attributes to string.\n *\n * @param {Object} attributes\n * @return {String}\n * @api private\n */\n\nfunction attrs (attributes) {\n  var str = ''\n  for (var key in attributes) {\n    if (key === 'innerHTML') continue\n    str += attr(key, attributes[key])\n  }\n  return str\n}\n\n/**\n * HTML attribute to string.\n *\n * @param {String} key\n * @param {String} val\n * @return {String}\n * @api private\n */\n\nfunction attr (key, val) {\n  return ' ' + key + '=\"' + val + '\"'\n}\n","var indexOf = require('fast.js/array/indexOf')\n\n/**\n * This file lists the supported SVG elements used by the\n * renderer. We may add better SVG support in the future\n * that doesn't require whitelisting elements.\n */\n\nexports.namespace = 'http://www.w3.org/2000/svg'\n\n/**\n * Supported SVG elements\n *\n * @type {Array}\n */\n\nexports.elements = [\n  'circle',\n  'defs',\n  'ellipse',\n  'g',\n  'line',\n  'linearGradient',\n  'mask',\n  'path',\n  'pattern',\n  'polygon',\n  'polyline',\n  'radialGradient',\n  'rect',\n  'stop',\n  'svg',\n  'text',\n  'tspan'\n]\n\n/**\n * Supported SVG attributes\n */\n\nexports.attributes = [\n  'cx',\n  'cy',\n  'd',\n  'dx',\n  'dy',\n  'fill',\n  'fillOpacity',\n  'fontFamily',\n  'fontSize',\n  'fx',\n  'fy',\n  'gradientTransform',\n  'gradientUnits',\n  'markerEnd',\n  'markerMid',\n  'markerStart',\n  'offset',\n  'opacity',\n  'patternContentUnits',\n  'patternUnits',\n  'points',\n  'preserveAspectRatio',\n  'r',\n  'rx',\n  'ry',\n  'spreadMethod',\n  'stopColor',\n  'stopOpacity',\n  'stroke',\n  'strokeDasharray',\n  'strokeLinecap',\n  'strokeOpacity',\n  'strokeWidth',\n  'textAnchor',\n  'transform',\n  'version',\n  'viewBox',\n  'x1',\n  'x2',\n  'x',\n  'y1',\n  'y2',\n  'y'\n]\n\n/**\n * Is element's namespace SVG?\n *\n * @param {String} name\n */\n\nexports.isElement = function (name) {\n  return indexOf(exports.elements, name) !== -1\n}\n\n/**\n * Are element's attributes SVG?\n *\n * @param {String} attr\n */\n\nexports.isAttribute = function (attr) {\n  return indexOf(exports.attributes, attr) !== -1\n}\n\n","/**\n * The npm 'defaults' module but without clone because\n * it was requiring the 'Buffer' module which is huge.\n *\n * @param {Object} options\n * @param {Object} defaults\n *\n * @return {Object}\n */\n\nexports.defaults = function(options, defaults) {\n  Object.keys(defaults).forEach(function(key) {\n    if (typeof options[key] === 'undefined') {\n      options[key] = defaults[key]\n    }\n  })\n  return options\n}\n","/**\n * Module dependencies.\n */\n\nvar type = require('component-type')\nvar slice = require('sliced')\nvar flatten = require('array-flatten')\n\n/**\n * This function lets us create virtual nodes using a simple\n * syntax. It is compatible with JSX transforms so you can use\n * JSX to write nodes that will compile to this function.\n *\n * let node = virtual('div', { id: 'foo' }, [\n *   virtual('a', { href: 'http://google.com' }, 'Google')\n * ])\n *\n * You can leave out the attributes or the children if either\n * of them aren't needed and it will figure out what you're\n * trying to do.\n */\n\nmodule.exports = virtual\n\n/**\n * Create virtual DOM trees.\n *\n * This creates the nicer API for the user.\n * It translates that friendly API into an actual tree of nodes.\n *\n * @param {String|Function} type\n * @param {Object} props\n * @param {Array} children\n * @return {Node}\n * @api public\n */\n\nfunction virtual (type, props, children) {\n  // Default to div with no args\n  if (!type) {\n    throw new Error('deku: Element needs a type. Read more: http://cl.ly/b0KZ')\n  }\n\n  // Skipped adding attributes and we're passing\n  // in children instead.\n  if (arguments.length === 2 && (typeof props === 'string' || Array.isArray(props))) {\n    children = props\n    props = {}\n  }\n\n  // Account for JSX putting the children as multiple arguments.\n  // This is essentially just the ES6 rest param\n  if (arguments.length > 2 && Array.isArray(arguments[2]) === false) {\n    children = slice(arguments, 2)\n  }\n\n  children = children || []\n  props = props || {}\n\n  // passing in a single child, you can skip\n  // using the array\n  if (!Array.isArray(children)) {\n    children = [ children ]\n  }\n\n  children = flatten(children, 1).reduce(normalize, [])\n\n  // pull the key out from the data.\n  var key = 'key' in props ? String(props.key) : null\n  delete props['key']\n\n  // if you pass in a function, it's a `Component` constructor.\n  // otherwise it's an element.\n  var node\n  if (typeof type === 'string') {\n    node = new ElementNode(type, props, key, children)\n  } else {\n    node = new ComponentNode(type, props, key, children)\n  }\n\n  // set the unique ID\n  node.index = 0\n\n  return node\n}\n\n/**\n * Parse nodes into real `Node` objects.\n *\n * @param {Mixed} node\n * @param {Integer} index\n * @return {Node}\n * @api private\n */\n\nfunction normalize (acc, node) {\n  if (node == null) {\n    return acc\n  }\n  if (typeof node === 'string' || typeof node === 'number') {\n    var newNode = new TextNode(String(node))\n    newNode.index = acc.length\n    acc.push(newNode)\n  } else {\n    node.index = acc.length\n    acc.push(node)\n  }\n  return acc\n}\n\n/**\n * Initialize a new `ComponentNode`.\n *\n * @param {Component} component\n * @param {Object} props\n * @param {String} key Used for sorting/replacing during diffing.\n * @param {Array} children Child virtual nodes\n * @api public\n */\n\nfunction ComponentNode (component, props, key, children) {\n  this.key = key\n  this.props = props\n  this.type = 'component'\n  this.component = component\n  this.props.children = children || []\n}\n\n/**\n * Initialize a new `ElementNode`.\n *\n * @param {String} tagName\n * @param {Object} attributes\n * @param {String} key Used for sorting/replacing during diffing.\n * @param {Array} children Child virtual dom nodes.\n * @api public\n */\n\nfunction ElementNode (tagName, attributes, key, children) {\n  this.type = 'element'\n  this.attributes = parseAttributes(attributes)\n  this.tagName = tagName\n  this.children = children || []\n  this.key = key\n}\n\n/**\n * Initialize a new `TextNode`.\n *\n * This is just a virtual HTML text object.\n *\n * @param {String} text\n * @api public\n */\n\nfunction TextNode (text) {\n  this.type = 'text'\n  this.data = String(text)\n}\n\n/**\n * Parse attributes for some special cases.\n *\n * TODO: This could be more functional and allow hooks\n * into the processing of the attributes at a component-level\n *\n * @param {Object} attributes\n *\n * @return {Object}\n */\n\nfunction parseAttributes (attributes) {\n  // style: { 'text-align': 'left' }\n  if (attributes.style) {\n    attributes.style = parseStyle(attributes.style)\n  }\n\n  // class: { foo: true, bar: false, baz: true }\n  // class: ['foo', 'bar', 'baz']\n  if (attributes.class) {\n    attributes.class = parseClass(attributes.class)\n  }\n\n  // Remove attributes with false values\n  var filteredAttributes = {}\n  for (var key in attributes) {\n    var value = attributes[key]\n    if (value == null || value === false) continue\n    filteredAttributes[key] = value\n  }\n\n  return filteredAttributes\n}\n\n/**\n * Parse a block of styles into a string.\n *\n * TODO: this could do a lot more with vendor prefixing,\n * number values etc. Maybe there's a way to allow users\n * to hook into this?\n *\n * @param {Object} styles\n *\n * @return {String}\n */\n\nfunction parseStyle (styles) {\n  if (type(styles) === 'string') {\n    return styles\n  }\n  var str = ''\n  for (var name in styles) {\n    var value = styles[name]\n    str = str + name + ':' + value + ';'\n  }\n  return str;\n}\n\n/**\n * Parse the class attribute so it's able to be\n * set in a more user-friendly way\n *\n * @param {String|Object|Array} value\n *\n * @return {String}\n */\n\nfunction parseClass (value) {\n  // { foo: true, bar: false, baz: true }\n  if (type(value) === 'object') {\n    var matched = []\n    for (var key in value) {\n      if (value[key]) matched.push(key)\n    }\n    value = matched\n  }\n\n  // ['foo', 'bar', 'baz']\n  if (type(value) === 'array') {\n    if (value.length === 0) {\n      return\n    }\n    value = value.join(' ')\n  }\n\n  return value\n}\n","/**\n * Recursive flatten function with depth.\n *\n * @param  {Array}  array\n * @param  {Array}  result\n * @param  {Number} depth\n * @return {Array}\n */\nfunction flattenDepth (array, result, depth) {\n  for (var i = 0; i < array.length; i++) {\n    var value = array[i]\n\n    if (depth > 0 && Array.isArray(value)) {\n      flattenDepth(value, result, depth - 1)\n    } else {\n      result.push(value)\n    }\n  }\n\n  return result\n}\n\n/**\n * Recursive flatten function. Omitting depth is slightly faster.\n *\n * @param  {Array} array\n * @param  {Array} result\n * @return {Array}\n */\nfunction flattenForever (array, result) {\n  for (var i = 0; i < array.length; i++) {\n    var value = array[i]\n\n    if (Array.isArray(value)) {\n      flattenForever(value, result)\n    } else {\n      result.push(value)\n    }\n  }\n\n  return result\n}\n\n/**\n * Flatten an array, with the ability to define a depth.\n *\n * @param  {Array}  array\n * @param  {Number} depth\n * @return {Array}\n */\nmodule.exports = function (array, depth) {\n  if (depth == null) {\n    return flattenForever(array, [])\n  }\n\n  return flattenDepth(array, [], depth)\n}\n","\n/**\n * Expose `Emitter`.\n */\n\nmodule.exports = Emitter;\n\n/**\n * Initialize a new `Emitter`.\n *\n * @api public\n */\n\nfunction Emitter(obj) {\n  if (obj) return mixin(obj);\n};\n\n/**\n * Mixin the emitter properties.\n *\n * @param {Object} obj\n * @return {Object}\n * @api private\n */\n\nfunction mixin(obj) {\n  for (var key in Emitter.prototype) {\n    obj[key] = Emitter.prototype[key];\n  }\n  return obj;\n}\n\n/**\n * Listen on the given `event` with `fn`.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.on =\nEmitter.prototype.addEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])\n    .push(fn);\n  return this;\n};\n\n/**\n * Adds an `event` listener that will be invoked a single\n * time then automatically removed.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.once = function(event, fn){\n  function on() {\n    this.off(event, on);\n    fn.apply(this, arguments);\n  }\n\n  on.fn = fn;\n  this.on(event, on);\n  return this;\n};\n\n/**\n * Remove the given callback for `event` or all\n * registered callbacks.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.off =\nEmitter.prototype.removeListener =\nEmitter.prototype.removeAllListeners =\nEmitter.prototype.removeEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n\n  // all\n  if (0 == arguments.length) {\n    this._callbacks = {};\n    return this;\n  }\n\n  // specific event\n  var callbacks = this._callbacks['$' + event];\n  if (!callbacks) return this;\n\n  // remove all handlers\n  if (1 == arguments.length) {\n    delete this._callbacks['$' + event];\n    return this;\n  }\n\n  // remove specific handler\n  var cb;\n  for (var i = 0; i < callbacks.length; i++) {\n    cb = callbacks[i];\n    if (cb === fn || cb.fn === fn) {\n      callbacks.splice(i, 1);\n      break;\n    }\n  }\n  return this;\n};\n\n/**\n * Emit `event` with the given args.\n *\n * @param {String} event\n * @param {Mixed} ...\n * @return {Emitter}\n */\n\nEmitter.prototype.emit = function(event){\n  this._callbacks = this._callbacks || {};\n  var args = [].slice.call(arguments, 1)\n    , callbacks = this._callbacks['$' + event];\n\n  if (callbacks) {\n    callbacks = callbacks.slice(0);\n    for (var i = 0, len = callbacks.length; i < len; ++i) {\n      callbacks[i].apply(this, args);\n    }\n  }\n\n  return this;\n};\n\n/**\n * Return array of callbacks for `event`.\n *\n * @param {String} event\n * @return {Array}\n * @api public\n */\n\nEmitter.prototype.listeners = function(event){\n  this._callbacks = this._callbacks || {};\n  return this._callbacks['$' + event] || [];\n};\n\n/**\n * Check if this emitter has `event` handlers.\n *\n * @param {String} event\n * @return {Boolean}\n * @api public\n */\n\nEmitter.prototype.hasListeners = function(event){\n  return !! this.listeners(event).length;\n};\n","/**\n * Expose `requestAnimationFrame()`.\n */\n\nexports = module.exports = window.requestAnimationFrame\n  || window.webkitRequestAnimationFrame\n  || window.mozRequestAnimationFrame\n  || fallback;\n\n/**\n * Fallback implementation.\n */\n\nvar prev = new Date().getTime();\nfunction fallback(fn) {\n  var curr = new Date().getTime();\n  var ms = Math.max(0, 16 - (curr - prev));\n  var req = setTimeout(fn, ms);\n  prev = curr;\n  return req;\n}\n\n/**\n * Cancel.\n */\n\nvar cancel = window.cancelAnimationFrame\n  || window.webkitCancelAnimationFrame\n  || window.mozCancelAnimationFrame\n  || window.clearTimeout;\n\nexports.cancel = function(id){\n  cancel.call(window, id);\n};\n","/**\n * toString ref.\n */\n\nvar toString = Object.prototype.toString;\n\n/**\n * Return the type of `val`.\n *\n * @param {Mixed} val\n * @return {String}\n * @api public\n */\n\nmodule.exports = function(val){\n  switch (toString.call(val)) {\n    case '[object Date]': return 'date';\n    case '[object RegExp]': return 'regexp';\n    case '[object Arguments]': return 'arguments';\n    case '[object Array]': return 'array';\n    case '[object Error]': return 'error';\n  }\n\n  if (val === null) return 'null';\n  if (val === undefined) return 'undefined';\n  if (val !== val) return 'nan';\n  if (val && val.nodeType === 1) return 'element';\n\n  val = val.valueOf\n    ? val.valueOf()\n    : Object.prototype.valueOf.apply(val)\n\n  return typeof val;\n};\n","function Pool(params) {\r\n    if (typeof params !== 'object') {\r\n        throw new Error(\"Please pass parameters. Example -> new Pool({ tagName: \\\"div\\\" })\");\r\n    }\r\n\r\n    if (typeof params.tagName !== 'string') {\r\n        throw new Error(\"Please specify a tagName. Example -> new Pool({ tagName: \\\"div\\\" })\");\r\n    }\r\n\r\n    this.storage = [];\r\n    this.tagName = params.tagName.toLowerCase();\r\n    this.namespace = params.namespace;\r\n}\r\n\r\nPool.prototype.push = function(el) {\r\n    if (el.tagName.toLowerCase() !== this.tagName) {\r\n        return;\r\n    }\r\n    \r\n    this.storage.push(el);\r\n};\r\n\r\nPool.prototype.pop = function(argument) {\r\n    if (this.storage.length === 0) {\r\n        return this.create();\r\n    } else {\r\n        return this.storage.pop();\r\n    }\r\n};\r\n\r\nPool.prototype.create = function() {\r\n    if (this.namespace) {\r\n        return document.createElementNS(this.namespace, this.tagName);\r\n    } else {\r\n        return document.createElement(this.tagName);\r\n    }\r\n};\r\n\r\nPool.prototype.allocate = function(size) {\r\n    if (this.storage.length >= size) {\r\n        return;\r\n    }\r\n\r\n    var difference = size - this.storage.length;\r\n    for (var poolAllocIter = 0; poolAllocIter < difference; poolAllocIter++) {\r\n        this.storage.push(this.create());\r\n    }\r\n};\r\n\r\nif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\r\n    module.exports = Pool;\r\n}\r\n","var slice = Array.prototype.slice\n\nmodule.exports = iterativelyWalk\n\nfunction iterativelyWalk(nodes, cb) {\n    if (!('length' in nodes)) {\n        nodes = [nodes]\n    }\n    \n    nodes = slice.call(nodes)\n\n    while(nodes.length) {\n        var node = nodes.shift(),\n            ret = cb(node)\n\n        if (ret) {\n            return ret\n        }\n\n        if (node.childNodes && node.childNodes.length) {\n            nodes = slice.call(node.childNodes).concat(nodes)\n        }\n    }\n}\n","'use strict';\n\nvar bindInternal3 = require('../function/bindInternal3');\n\n/**\n * # For Each\n *\n * A fast `.forEach()` implementation.\n *\n * @param  {Array}    subject     The array (or array-like) to iterate over.\n * @param  {Function} fn          The visitor function.\n * @param  {Object}   thisContext The context for the visitor.\n */\nmodule.exports = function fastForEach (subject, fn, thisContext) {\n  var length = subject.length,\n      iterator = thisContext !== undefined ? bindInternal3(fn, thisContext) : fn,\n      i;\n  for (i = 0; i < length; i++) {\n    iterator(subject[i], i, subject);\n  }\n};\n","'use strict';\n\n/**\n * # Index Of\n *\n * A faster `Array.prototype.indexOf()` implementation.\n *\n * @param  {Array}  subject   The array (or array-like) to search within.\n * @param  {mixed}  target    The target item to search for.\n * @param  {Number} fromIndex The position to start searching from, if known.\n * @return {Number}           The position of the target in the subject, or -1 if it does not exist.\n */\nmodule.exports = function fastIndexOf (subject, target, fromIndex) {\n  var length = subject.length,\n      i = 0;\n\n  if (typeof fromIndex === 'number') {\n    i = fromIndex;\n    if (i < 0) {\n      i += length;\n      if (i < 0) {\n        i = 0;\n      }\n    }\n  }\n\n  for (; i < length; i++) {\n    if (subject[i] === target) {\n      return i;\n    }\n  }\n  return -1;\n};\n","'use strict';\n\nvar bindInternal4 = require('../function/bindInternal4');\n\n/**\n * # Reduce\n *\n * A fast `.reduce()` implementation.\n *\n * @param  {Array}    subject      The array (or array-like) to reduce.\n * @param  {Function} fn           The reducer function.\n * @param  {mixed}    initialValue The initial value for the reducer, defaults to subject[0].\n * @param  {Object}   thisContext  The context for the reducer.\n * @return {mixed}                 The final result.\n */\nmodule.exports = function fastReduce (subject, fn, initialValue, thisContext) {\n  var length = subject.length,\n      iterator = thisContext !== undefined ? bindInternal4(fn, thisContext) : fn,\n      i, result;\n\n  if (initialValue === undefined) {\n    i = 1;\n    result = subject[0];\n  }\n  else {\n    i = 0;\n    result = initialValue;\n  }\n\n  for (; i < length; i++) {\n    result = iterator(result, subject[i], i, subject);\n  }\n\n  return result;\n};\n","'use strict';\n\nvar forEachArray = require('./array/forEach'),\n    forEachObject = require('./object/forEach');\n\n/**\n * # ForEach\n *\n * A fast `.forEach()` implementation.\n *\n * @param  {Array|Object} subject     The array or object to iterate over.\n * @param  {Function}     fn          The visitor function.\n * @param  {Object}       thisContext The context for the visitor.\n */\nmodule.exports = function fastForEach (subject, fn, thisContext) {\n  if (subject instanceof Array) {\n    return forEachArray(subject, fn, thisContext);\n  }\n  else {\n    return forEachObject(subject, fn, thisContext);\n  }\n};","'use strict';\n\n/**\n * Internal helper to bind a function known to have 3 arguments\n * to a given context.\n */\nmodule.exports = function bindInternal3 (func, thisContext) {\n  return function (a, b, c) {\n    return func.call(thisContext, a, b, c);\n  };\n};\n","'use strict';\n\n/**\n * Internal helper to bind a function known to have 4 arguments\n * to a given context.\n */\nmodule.exports = function bindInternal4 (func, thisContext) {\n  return function (a, b, c, d) {\n    return func.call(thisContext, a, b, c, d);\n  };\n};\n","'use strict';\n\n/**\n * Analogue of Object.assign().\n * Copies properties from one or more source objects to\n * a target object. Existing keys on the target object will be overwritten.\n *\n * > Note: This differs from spec in some important ways:\n * > 1. Will throw if passed non-objects, including `undefined` or `null` values.\n * > 2. Does not support the curious Exception handling behavior, exceptions are thrown immediately.\n * > For more details, see:\n * > https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n *\n *\n *\n * @param  {Object} target      The target object to copy properties to.\n * @param  {Object} source, ... The source(s) to copy properties from.\n * @return {Object}             The updated target object.\n */\nmodule.exports = function fastAssign (target) {\n  var totalArgs = arguments.length,\n      source, i, totalKeys, keys, key, j;\n\n  for (i = 1; i < totalArgs; i++) {\n    source = arguments[i];\n    keys = Object.keys(source);\n    totalKeys = keys.length;\n    for (j = 0; j < totalKeys; j++) {\n      key = keys[j];\n      target[key] = source[key];\n    }\n  }\n  return target;\n};\n","'use strict';\n\nvar bindInternal3 = require('../function/bindInternal3');\n\n/**\n * # For Each\n *\n * A fast object `.forEach()` implementation.\n *\n * @param  {Object}   subject     The object to iterate over.\n * @param  {Function} fn          The visitor function.\n * @param  {Object}   thisContext The context for the visitor.\n */\nmodule.exports = function fastForEachObject (subject, fn, thisContext) {\n  var keys = Object.keys(subject),\n      length = keys.length,\n      iterator = thisContext !== undefined ? bindInternal3(fn, thisContext) : fn,\n      key, i;\n  for (i = 0; i < length; i++) {\n    key = keys[i];\n    iterator(subject[key], key, subject);\n  }\n};\n","'use strict';\n\nvar bindInternal4 = require('../function/bindInternal4');\n\n/**\n * # Reduce\n *\n * A fast object `.reduce()` implementation.\n *\n * @param  {Object}   subject      The object to reduce over.\n * @param  {Function} fn           The reducer function.\n * @param  {mixed}    initialValue The initial value for the reducer, defaults to subject[0].\n * @param  {Object}   thisContext  The context for the reducer.\n * @return {mixed}                 The final result.\n */\nmodule.exports = function fastReduceObject (subject, fn, initialValue, thisContext) {\n  var keys = Object.keys(subject),\n      length = keys.length,\n      iterator = thisContext !== undefined ? bindInternal4(fn, thisContext) : fn,\n      i, key, result;\n\n  if (initialValue === undefined) {\n    i = 1;\n    result = subject[keys[0]];\n  }\n  else {\n    i = 0;\n    result = initialValue;\n  }\n\n  for (; i < length; i++) {\n    key = keys[i];\n    result = iterator(result, subject[key], key, subject);\n  }\n\n  return result;\n};\n","'use strict';\n\nvar reduceArray = require('./array/reduce'),\n    reduceObject = require('./object/reduce');\n\n/**\n * # Reduce\n *\n * A fast `.reduce()` implementation.\n *\n * @param  {Array|Object} subject      The array or object to reduce over.\n * @param  {Function}     fn           The reducer function.\n * @param  {mixed}        initialValue The initial value for the reducer, defaults to subject[0].\n * @param  {Object}       thisContext  The context for the reducer.\n * @return {Array|Object}              The array or object containing the results.\n */\nmodule.exports = function fastReduce (subject, fn, initialValue, thisContext) {\n  if (subject instanceof Array) {\n    return reduceArray(subject, fn, initialValue, thisContext);\n  }\n  else {\n    return reduceObject(subject, fn, initialValue, thisContext);\n  }\n};","/** generate unique id for selector */\r\nvar counter = Date.now() % 1e9;\r\n\r\nmodule.exports = function getUid(){\r\n\treturn (Math.random() * 1e9 >>> 0) + (counter++);\r\n};","/*global window*/\n\n/**\n * Check if object is dom node.\n *\n * @param {Object} val\n * @return {Boolean}\n * @api public\n */\n\nmodule.exports = function isNode(val){\n  if (!val || typeof val !== 'object') return false;\n  if (window && 'object' == typeof window.Node) return val instanceof window.Node;\n  return 'number' == typeof val.nodeType && 'string' == typeof val.nodeName;\n}\n","module.exports = isPromise;\n\nfunction isPromise(obj) {\n  return obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';\n}\n","(function (root, factory){\n  'use strict';\n\n  /*istanbul ignore next:cant test*/\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = factory();\n  } else if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else {\n    // Browser globals\n    root.objectPath = factory();\n  }\n})(this, function(){\n  'use strict';\n\n  var\n    toStr = Object.prototype.toString,\n    _hasOwnProperty = Object.prototype.hasOwnProperty;\n\n  function isEmpty(value){\n    if (!value) {\n      return true;\n    }\n    if (isArray(value) && value.length === 0) {\n      return true;\n    } else {\n      for (var i in value) {\n        if (_hasOwnProperty.call(value, i)) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n  function toString(type){\n    return toStr.call(type);\n  }\n\n  function isNumber(value){\n    return typeof value === 'number' || toString(value) === \"[object Number]\";\n  }\n\n  function isString(obj){\n    return typeof obj === 'string' || toString(obj) === \"[object String]\";\n  }\n\n  function isObject(obj){\n    return typeof obj === 'object' && toString(obj) === \"[object Object]\";\n  }\n\n  function isArray(obj){\n    return typeof obj === 'object' && typeof obj.length === 'number' && toString(obj) === '[object Array]';\n  }\n\n  function isBoolean(obj){\n    return typeof obj === 'boolean' || toString(obj) === '[object Boolean]';\n  }\n\n  function getKey(key){\n    var intKey = parseInt(key);\n    if (intKey.toString() === key) {\n      return intKey;\n    }\n    return key;\n  }\n\n  function set(obj, path, value, doNotReplace){\n    if (isNumber(path)) {\n      path = [path];\n    }\n    if (isEmpty(path)) {\n      return obj;\n    }\n    if (isString(path)) {\n      return set(obj, path.split('.').map(getKey), value, doNotReplace);\n    }\n    var currentPath = path[0];\n\n    if (path.length === 1) {\n      var oldVal = obj[currentPath];\n      if (oldVal === void 0 || !doNotReplace) {\n        obj[currentPath] = value;\n      }\n      return oldVal;\n    }\n\n    if (obj[currentPath] === void 0) {\n      //check if we assume an array\n      if(isNumber(path[1])) {\n        obj[currentPath] = [];\n      } else {\n        obj[currentPath] = {};\n      }\n    }\n\n    return set(obj[currentPath], path.slice(1), value, doNotReplace);\n  }\n\n  function del(obj, path) {\n    if (isNumber(path)) {\n      path = [path];\n    }\n\n    if (isEmpty(obj)) {\n      return void 0;\n    }\n\n    if (isEmpty(path)) {\n      return obj;\n    }\n    if(isString(path)) {\n      return del(obj, path.split('.'));\n    }\n\n    var currentPath = getKey(path[0]);\n    var oldVal = obj[currentPath];\n\n    if(path.length === 1) {\n      if (oldVal !== void 0) {\n        if (isArray(obj)) {\n          obj.splice(currentPath, 1);\n        } else {\n          delete obj[currentPath];\n        }\n      }\n    } else {\n      if (obj[currentPath] !== void 0) {\n        return del(obj[currentPath], path.slice(1));\n      }\n    }\n\n    return obj;\n  }\n\n  var objectPath = {};\n\n  objectPath.has = function (obj, path) {\n    if (isEmpty(obj)) {\n      return false;\n    }\n\n    if (isNumber(path)) {\n      path = [path];\n    } else if (isString(path)) {\n      path = path.split('.');\n    }\n\n    if (isEmpty(path) || path.length === 0) {\n      return false;\n    }\n\n    for (var i = 0; i < path.length; i++) {\n      var j = path[i];\n      if ((isObject(obj) || isArray(obj)) && _hasOwnProperty.call(obj, j)) {\n        obj = obj[j];\n      } else {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  objectPath.ensureExists = function (obj, path, value){\n    return set(obj, path, value, true);\n  };\n\n  objectPath.set = function (obj, path, value, doNotReplace){\n    return set(obj, path, value, doNotReplace);\n  };\n\n  objectPath.insert = function (obj, path, value, at){\n    var arr = objectPath.get(obj, path);\n    at = ~~at;\n    if (!isArray(arr)) {\n      arr = [];\n      objectPath.set(obj, path, arr);\n    }\n    arr.splice(at, 0, value);\n  };\n\n  objectPath.empty = function(obj, path) {\n    if (isEmpty(path)) {\n      return obj;\n    }\n    if (isEmpty(obj)) {\n      return void 0;\n    }\n\n    var value, i;\n    if (!(value = objectPath.get(obj, path))) {\n      return obj;\n    }\n\n    if (isString(value)) {\n      return objectPath.set(obj, path, '');\n    } else if (isBoolean(value)) {\n      return objectPath.set(obj, path, false);\n    } else if (isNumber(value)) {\n      return objectPath.set(obj, path, 0);\n    } else if (isArray(value)) {\n      value.length = 0;\n    } else if (isObject(value)) {\n      for (i in value) {\n        if (_hasOwnProperty.call(value, i)) {\n          delete value[i];\n        }\n      }\n    } else {\n      return objectPath.set(obj, path, null);\n    }\n  };\n\n  objectPath.push = function (obj, path /*, values */){\n    var arr = objectPath.get(obj, path);\n    if (!isArray(arr)) {\n      arr = [];\n      objectPath.set(obj, path, arr);\n    }\n\n    arr.push.apply(arr, Array.prototype.slice.call(arguments, 2));\n  };\n\n  objectPath.coalesce = function (obj, paths, defaultValue) {\n    var value;\n\n    for (var i = 0, len = paths.length; i < len; i++) {\n      if ((value = objectPath.get(obj, paths[i])) !== void 0) {\n        return value;\n      }\n    }\n\n    return defaultValue;\n  };\n\n  objectPath.get = function (obj, path, defaultValue){\n    if (isNumber(path)) {\n      path = [path];\n    }\n    if (isEmpty(path)) {\n      return obj;\n    }\n    if (isEmpty(obj)) {\n      return defaultValue;\n    }\n    if (isString(path)) {\n      return objectPath.get(obj, path.split('.'), defaultValue);\n    }\n\n    var currentPath = getKey(path[0]);\n\n    if (path.length === 1) {\n      if (obj[currentPath] === void 0) {\n        return defaultValue;\n      }\n      return obj[currentPath];\n    }\n\n    return objectPath.get(obj[currentPath], path.slice(1), defaultValue);\n  };\n\n  objectPath.del = function(obj, path) {\n    return del(obj, path);\n  };\n\n  return objectPath;\n});\n","/**\n * Module Dependencies.\n */\n\nvar raf = require('raf');\n\n/**\n * Export `throttle`.\n */\n\nmodule.exports = throttle;\n\n/**\n * Executes a function at most once per animation frame. Kind of like\n * throttle, but it throttles at ~60Hz.\n *\n * @param {Function} fn - the Function to throttle once per animation frame\n * @return {Function}\n * @public\n */\n\nfunction throttle(fn) {\n  var rtn;\n  var ignoring = false;\n\n  return function queue() {\n    if (ignoring) return rtn;\n    ignoring = true;\n\n    raf(function() {\n      ignoring = false;\n    });\n\n    rtn = fn.apply(this, arguments);\n    return rtn;\n  };\n}\n","module.exports = exports = require('./lib/sliced');\n","\n/**\n * An Array.prototype.slice.call(arguments) alternative\n *\n * @param {Object} args something with a length\n * @param {Number} slice\n * @param {Number} sliceEnd\n * @api public\n */\n\nmodule.exports = function (args, slice, sliceEnd) {\n  var ret = [];\n  var len = args.length;\n\n  if (0 === len) return ret;\n\n  var start = slice < 0\n    ? Math.max(0, slice + len)\n    : slice || 0;\n\n  if (sliceEnd !== undefined) {\n    len = sliceEnd < 0\n      ? sliceEnd + len\n      : sliceEnd\n  }\n\n  while (len-- > start) {\n    ret[len - start] = args[len];\n  }\n\n  return ret;\n}\n\n","'use strict';\n\nvar Executor = require('./executor');\n\nfunction Benchmark() {\n  this.running = false;\n  this.impl = null;\n  this.tests = null;\n  this.reportCallback = null;\n\n  this.container = document.createElement('div');\n\n  this._runButton = document.getElementById('RunButton');\n  this._iterationsElement = document.getElementById('Iterations');\n  this._reportElement = document.createElement('pre');\n\n  document.body.appendChild(this.container);\n  document.body.appendChild(this._reportElement);\n\n  var self = this;\n\n  this._runButton.addEventListener('click', function(e) {\n    e.preventDefault();\n\n    if (!self.running) {\n      var iterations = parseInt(self._iterationsElement.value);\n      if (iterations <= 0) {\n        iterations = 10;\n      }\n\n      self.run(iterations);\n    }\n  }, false);\n\n  this.ready(true);\n}\n\nBenchmark.prototype.ready = function(v) {\n  if (v) {\n    this._runButton.disabled = '';\n  } else {\n    this._runButton.disabled = 'true';\n  }\n};\n\nBenchmark.prototype.run = function(iterations) {\n  var self = this;\n  this.running = true;\n  this.ready(false);\n\n  new Executor(self.impl, self.container, self.tests, 1, function() { // warmup\n    new Executor(self.impl, self.container, self.tests, iterations, function(samples) {\n      self._reportElement.textContent = JSON.stringify(samples, null, ' ');\n      self.running = false;\n      self.ready(true);\n      if (self.reportCallback != null) {\n        self.reportCallback(samples);\n      }\n    }).start();\n  }).start();\n};\n\nmodule.exports = Benchmark;\n","'use strict';\n\nfunction Executor(impl, container, tests, iterations, cb, iterCb) {\n  if (iterCb === void 0) iterCb = null;\n\n  this.impl = impl;\n  this.container = container;\n  this.tests = tests;\n  this.iterations = iterations;\n  this.cb = cb;\n  this.iterCb = iterCb;\n\n  this._currentTest = 0;\n  this._currentIter = 0;\n  this._renderSamples = [];\n  this._updateSamples = [];\n  this._result = [];\n\n  this._tasksCount = tests.length * iterations;\n\n  this._iter = this.iter.bind(this);\n}\n\nExecutor.prototype.start = function() {\n  this._iter();\n};\n\nExecutor.prototype.finished = function() {\n  this.cb(this._result);\n};\n\nExecutor.prototype.progress = function() {\n  if (this._currentTest === 0 && this._currentIter === 0) {\n    return 0;\n  }\n\n  var tests = this.tests;\n  return (this._currentTest * tests.length + this._currentIter) / (tests.length * this.iterataions);\n};\n\nExecutor.prototype.iter = function() {\n  if (this.iterCb != null) {\n    this.iterCb(this);\n  }\n\n  var tests = this.tests;\n\n  if (this._currentTest < tests.length) {\n    var test = tests[this._currentTest];\n\n    if (this._currentIter < this.iterations) {\n      var e, t;\n      var renderTime, updateTime;\n\n      e = new this.impl(this.container, test.data.a, test.data.b);\n      e.setUp();\n\n      t = window.performance.now();\n      e.render();\n      renderTime = window.performance.now() - t;\n\n      t = window.performance.now();\n      e.update();\n      updateTime = window.performance.now() - t;\n      e.tearDown();\n\n      this._renderSamples.push(renderTime);\n      this._updateSamples.push(updateTime);\n\n      this._currentIter++;\n    } else {\n      this._result.push({\n        name: test.name + ' ' + 'render()',\n        data: this._renderSamples.slice(0)\n      });\n\n      this._result.push({\n        name: test.name + ' ' + 'update()',\n        data: this._updateSamples.slice(0)\n      });\n\n      this._currentTest++;\n\n      this._currentIter = 0;\n      this._renderSamples = [];\n      this._updateSamples = [];\n    }\n\n    setTimeout(this._iter, 0);\n  } else {\n    this.finished();\n  }\n};\n\nmodule.exports = Executor;\n","'use strict';\n\nvar Benchmark = require('./benchmark');\nvar benchmark = new Benchmark();\n\nfunction initFromScript(scriptUrl, impl) {\n  var e = document.createElement('script');\n  e.src = scriptUrl;\n\n  e.onload = function() {\n    benchmark.tests = window.benchmarkTests();\n    benchmark.ready(true);\n  };\n\n  document.head.appendChild(e);\n}\n\nfunction initFromParentWindow(parent, name, version, id) {\n  window.addEventListener('message', function(e) {\n    var data = e.data;\n    var type = data.type;\n\n    if (type === 'tests') {\n      benchmark.tests = data.data;\n      benchmark.reportCallback = function(samples) {\n        parent.postMessage({\n          type: 'report',\n          data: {\n            name: name,\n            version: version,\n            samples: samples\n          },\n          id: id\n        }, '*');\n      };\n      benchmark.ready(true);\n\n      parent.postMessage({\n        type: 'ready',\n        data: null,\n        id: id\n      }, '*');\n    } else if (type === 'run') {\n      benchmark.run(data.data.iterations);\n    }\n  }, false);\n\n  parent.postMessage({\n    type: 'init',\n    data: null,\n    id: id\n  }, '*');\n}\n\nfunction init(name, version, impl) {\n  // Parse Query String.\n  var qs = (function(a) {\n    if (a == \"\") return {};\n    var b = {};\n    for (var i = 0; i < a.length; ++i) {\n      var p=a[i].split('=', 2);\n      if (p.length == 1) {\n        b[p[0]] = \"\";\n      } else {\n        b[p[0]] = decodeURIComponent(p[1].replace(/\\+/g, \" \"));\n      }\n    }\n    return b;\n  })(window.location.search.substr(1).split('&'));\n\n  if (qs['name'] !== void 0) {\n    name = qs['name'];\n  }\n\n  if (qs['version'] !== void 0) {\n    version = qs['version'];\n  }\n\n  var type = qs['type'];\n  var id;\n  if (type === 'iframe') {\n    id = qs['id'];\n    if (id === void 0) id = null;\n    initFromParentWindow(window.parent, name, version, id);\n  } else if (type === 'window') {\n    if (window.opener != null) {\n      id = qs['id'];\n      if (id === void 0) id = null;\n      initFromParentWindow(window.opener, name, version, id);\n    } else {\n      console.log('Failed to initialize: opener window is NULL');\n    }\n  } else {\n    var testsUrl = qs['data']; // url to the script generating test data\n    if (testsUrl !== void 0) {\n      initFromScript(testsUrl);\n    } else {\n      console.log('Failed to initialize: cannot load tests data');\n    }\n  }\n\n  benchmark.impl = impl;\n}\n\n// performance.now() polyfill\n// https://gist.github.com/paulirish/5438650\n// prepare base perf object\nif (typeof window.performance === 'undefined') {\n  window.performance = {};\n}\nif (!window.performance.now){\n  var nowOffset = Date.now();\n  if (performance.timing && performance.timing.navigationStart) {\n    nowOffset = performance.timing.navigationStart;\n  }\n  window.performance.now = function now(){\n    return Date.now() - nowOffset;\n  };\n}\n\nmodule.exports = init;\n"],"sourceRoot":"/source/"}